scalar Double, 

type Item {
    id: ID
    codigo: String
    nombre: String
    desc: String
    cantidad: Int
    fechaCompra: Date
    valor: Double
    ubicacion: String
    estado: Boolean
    obs: String
    tiempoVida: Int
    mantenimientos: [Date]
    tipo: TipoItem
}

type TipoItem {
    id: ID
    nombre: String
}

type Dependencia {
    id: ID
    nombre: String
    desc: String
}

type Pertenece {
    id: ID
    dependencia: Dependencia
    cantidad: Int
    fecha: Date
    fecha_retorno: Date
    retornado: Boolean
    item: Item
}

input ItemInput {
    codigo: String
    nombre: String
    desc: String
    fechaCompra: Date
    cantidad: Int
    valor: Double
    ubicacion: String
    estado: String
    obs: String
    tiempoVida: Int
    tipo: String
}

input DependenciaInput {
    nombre: String
    desc: String
}

type Query {
    obtenerItems: [Item]
    obtenerItemsPorNombre(nombre: String): [Item]
    obtenerItemPorId (id: ID): Item
    obtenerTiposItem: [TipoItem]
    obtenerMantenimientos(id: ID): [Date]
    obtenerItemsPorEstado(estado: String): [Item]
    obtenerDependencias (nombre: String): [Dependencia]
    obtenerDependenciaPorId (id: ID): Dependencia
    obtenerPertenencias (id: ID): [Pertenece]
    obtenerItemsCantidad: [Item]
}

type Mutation {
    agregarItem (input: ItemInput): Item
    agregarTipoItem (nombre: String): TipoItem
    eliminarTipoItem (id: String): TipoItem
    editarItem (id: ID input: ItemInput): Boolean
    agregarMantenimiento (id: ID fecha: Date): Boolean
    eliminarMantenimientos (id: ID): Boolean
    editarMantenimientos (id: ID, fecha: Date): Boolean
    agregarDependencias ( input: DependenciaInput): Dependencia
    editarDependencia (id: ID input: DependenciaInput): Boolean
    eliminarDependecia (id: ID): Dependencia
    asignarPertenencia (itemId: ID dependenciaId: ID cantidad: Int): Pertenece
    retornoPertenencia (pertenenciaId: ID): Pertenece
    agregarCantidadesItem (itemId: ID, cantidad: Int): Item
}